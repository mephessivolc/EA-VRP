# EA-VRP-Q (Electric-Autonomous Vehicle Routing with Quantum Optimization)

<p align="center">
<img src="assets/architecture.svg" width="650">
</p>

**EA-VRP-Q** é um protótipo de *pipeline* completo que combina heurísticas
clássicas de agrupamento de passageiros, formulação **QUBO** e
resolução via **QAOA** (Quantum Approximate Optimization Algorithm) para
instâncias de roteamento de veículos elétricos/autônomos com pontos de
recarga.

---

## 1. Visão Geral

| Etapa                 | Arquivo            | Função                                                       |
| --------------------- | ------------------ | ------------------------------------------------------------ |
| **Geração sintética** | `main.py`          | cria passageiros, veículos e estações                        |
| **Agrupamento**       | `grouping.py`      | algoritmo *Greedy Capacity-Constrained Clustering* (1-5 pax) |
| **Formulação QUBO**   | `encoder.py`       | variáveis \\(y\_{v,g}\\) e \\(z\_{v,r}\\), penalidades λ / μ |
| **Solver quântico**   | `qaoa_solver.py`   | QAOA (Pennylane) + histograma de bitstrings                  |
| **Grafo ilustrativo** | `graph_builder.py` | rede *NetworkX* colorida com distâncias nas arestas          |

---

### 2 · Instalação & execução via **Docker / Compose**

O repositório já contém um **Dockerfile** (raiz do projeto) e um
`docker-compose.yml` simples que expõe um serviço chamado **`python`**.

<details>
<summary>docker-compose.yml resumido</summary>

```yaml
services:
  python:
    build: .
    container_name: python-container
    volumes:
      - .:/app        # monta o código e grava saídas na pasta local
    environment:
      - PYTHONUNBUFFERED=1
```

</details>

> A imagem usa `python:3.13-slim` (ver Dockerfile) com todas as
> dependências do `requirements.txt` instaladas em **/app**.

#### Passo-a-passo

```bash
# 1. clone o projeto
git clone https://github.com/mephessivolc/EA-VRP.git
cd ea-vrp-q

# 2. construa a imagem (leva ~1-2 min)
docker compose build              # equivale a `docker compose build python`

# 3. execute o pipeline com os parâmetros padrão definidos no entrypoint
docker compose up
```

*Os arquivos gerados* (`hist.png`, `graph.png`, etc.) aparecerão na pasta
local porque o diretório do projeto é montado no contêiner (`.:/app`).

#### Executar com parâmetros próprios

Sobrescreva o comando do serviço ad-hoc:

```bash
docker compose run --rm python \
    python main.py 
```

Isso inicia um contêiner efêmero (`--rm`), executa o script com seus
argumentos e salva o histograma em `figs/`.

> **Dica:** se quiser desenvolver interativamente, o compose já abre
> `stdin_open: true` + `tty: true` – basta entrar com
> `docker compose exec python bash`.

Pronto! Sem dependências globais de Python – todo o ambiente roda isolado
no contêiner.

---

## 3. Executando um exemplo

```bash
python main.py \
  --passengers 30 \
  --vehicles 6 \
  --layers 2 \
  --steps 200 \
  --hist hist.png \
  --seed 42
```

* **Saída do terminal**

```
==== Grupos formados ====
Grupo 01 | 5 passageiros → [1, 4, 7, 9, 12]
...
Variáveis / qubits: 48
Melhor estado: |123⟩  ==> custo  57.42
Histograma salvo em: hist.png
```

* **Arquivos gerados**

  * `hist.png` – histograma de frequências de bitstring (barra vermelha = menor energia).
  * `graph.png` (opcional) – grafo completo com nós coloridos e distâncias.

---

## 4. Estrutura de Pastas

```
ea-vrp-q/
├── encoder.py          # QUBO com recarga
├── grouping.py         # agrupamento OOP
├── qaoa_solver.py      # QAOA + histograma
├── graph_builder.py    # visualização NetworkX
├── main.py             # pipeline CLI
├── utils.py, geografics.py
└── requirements.txt
```

---

## 5. Parametrização Importante

| Sinal      | Descrição                 | Default         |
| ---------- | ------------------------- | --------------- |
| `--layers` | p-camadas do QAOA         | 1               |
| `--steps`  | iterações do Adam         | 150             |
| `--shots`  | amostras por execução     | 2 000           |
| `--hist`   | nome do PNG do histograma | `hist_qaoa.png` |

Banco de penalidades:

* **λ** para “cada grupo servido *exatamente* uma vez”.
* **μ** para “≤ 1 estação por veículo”.
  Ajustável no construtor `EA_VRP_QUBOEncoder`.

---

## 6. Extensões Futuras

* Janelas de tempo e capacidade da bateria na função-custo.
* Backend D-Wave / IBM Q via plugins Pennylane.
* Integração com mapas reais (OSRM / OpenStreetMap).
* Otimizadores híbridos (QAOA + SA, QAOA + VNS).

---

## 7. Licença

Projeto sob **MIT License** – use, modifique e contribua!

---

## Citação
*Se usar este código em artigos ou projetos acadêmicos, cite:*
```bibtex
@software{ea_vrp_qubo_2025,
  author       = {Caface, Clovis and Yokoingawa, Raphael},
  title        = {{EA‑VRP‑QUBO}: Quantum Routing with Passenger Grouping},
  year         = {2025},
  publisher    = {GitHub},
  url          = {https://github.com/mephessivolc/EA-VRP},
  version      = {1.0},
  note         = {Accessed: 2025-07-28}
}
```

Contribuições via Pull Request são bem-vindas!
